names = [[0x9D, 0x8C, 0x8F, 0xE3, 0x1C, 0xE3, 0xA6, 0x50],
[0x99, 0x81, 0x40, 0xE3, 0x1C, 0xE3, 0xA6, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0x8C, 0xE3, 0x40, 0xE3, 0x1C, 0xE3, 0xA6, 0x50],
[0xA1, 0xAB, 0x8C, 0x8F, 0xE3, 0x1C, 0xE3, 0xA6, 0x50],
[0x8F, 0x82, 0xAB, 0x9D, 0xAC, 0x42, 0x50],
[0x2C, 0xC3, 0xDE, 0xBC, 0xE0, 0x50],
[0xC2, 0xB7, 0xC9, 0xB2, 0xBC, 0x50],
[0x34, 0xB8, 0xB9, 0xBC, 0x50],
[0xD4, 0xB9, 0x34, 0xC5, 0xB5, 0xBC, 0x50],
[0xBA, 0xB5, 0xD8, 0xC5, 0xB5, 0xBC, 0x50],
[0xC8, 0xD1, 0xB9, 0x2B, 0xCF, 0xBC, 0x50],
[0xCF, 0xCB, 0xC5, 0xB5, 0xBC, 0x50],
[0xB6, 0xB2, 0xCC, 0xB8, 0xC9, 0xB8, 0xBD, 0xD8, 0x50],
[0xCF, 0xDE, 0xC0, 0xDE, 0xC9, 0xB8, 0xBD, 0xD8, 0x50],
[0xBD, 0x2A, 0xB2, 0x86, 0x0C, 0x28, 0xBD, 0xD8, 0x50],
[0xB2, 0xB2, 0x86, 0x0C, 0x28, 0xBD, 0xD8, 0x50],
[0x86, 0x0C, 0x28, 0xBD, 0xD8, 0x50],
[0xB1, 0xC5, 0xC7, 0xB9, 0xC9, 0x9A, 0xA1, 0x50],
[0xD1, 0xBC, 0xD6, 0xB9, 0x8C, 0x42, 0xA7, 0xE3, 0x50],
[0x41, 0xE3, 0x41, 0xE3, 0x9D, 0xAC, 0x87, 0x8C, 0x50],
[0xCE, 0xC9, 0xB5, 0xC9, 0xB2, 0xBC, 0x50],
[0xB6, 0xD0, 0xC5, 0xD8, 0xC9, 0xB2, 0xBC, 0x50],
[0xD0, 0x2D, 0xC9, 0xB2, 0xBC, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0x9D, 0xAC, 0x87, 0x8C, 0x80, 0xAC, 0x42, 0x50],
[0x8F, 0x82, 0xD8, 0xAB, 0x50],
[0x1B, 0xA8, 0x9F, 0xCD, 0x86, 0x8B, 0xAB, 0x50],
[0x81, 0xAB, 0x13, 0xA0, 0x8F, 0x8B, 0xAB, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xD8, 0x0E, 0x90, 0x82, 0x9F, 0x50],
[0xCC, 0xBC, 0x27, 0xC5, 0x80, 0xA0, 0x50],
[0xA4, 0x87, 0x80, 0x8F, 0xE3, 0xA6, 0x50],
[0xD8, 0xE3, 0x9B, 0xC9, 0xB2, 0xBC, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xB7, 0xDE, 0xC9, 0xC0, 0xCF, 0x50],
[0x41, 0xAC, 0x41, 0xC6, 0xDE, 0x27, 0xE2, 0xB3, 0x50],
[0xC5, 0xDE, 0x33, 0xD3, 0xC5, 0xB5, 0xBC, 0x50],
[0x29, 0xDE, 0xB7, 0xC9, 0xB6, 0xB9, 0xD7, 0x50],
[0x29, 0xDE, 0xB7, 0xC9, 0xB6, 0xC0, 0xCF, 0xD8, 0x50],
[0x83, 0x9B, 0xEB, 0x87, 0x93, 0x05, 0xE3, 0x13, 0x50],
[0x8B, 0xA6, 0x19, 0xE3, 0x8C, 0x42, 0xA7, 0xE3, 0x50],
[0x09, 0xE3, 0xA6, 0x13, 0x8C, 0x42, 0xA7, 0xE3, 0x50],
[0x87, 0xD8, 0xB0, 0x92, 0x85, 0xAC, 0x8F, 0xE3, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xB5, 0xB2, 0xBC, 0xB2, 0xD0, 0x2D, 0x50],
[0x8A, 0x81, 0x89, 0x8E, 0xE3, 0x0F, 0x50],
[0x9E, 0xAC, 0x87, 0x8C, 0x84, 0xA7, 0x50],
[0x42, 0xA5, 0x8C, 0x40, 0xA9, 0xE3, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0x12, 0xB0, 0x9B, 0xEB, 0xAB, 0x0F, 0xE3, 0x50],
[0x8C, 0x41, 0xE3, 0x0F, 0xE3, 0x50],
[0x8C, 0x47, 0x8B, 0xAD, 0xA6, 0x80, 0xAC, 0x42, 0x50],
[0x89, 0x81, 0xAB, 0x88, 0xE3, 0x8C, 0x50],
[0x0F, 0x82, 0x0B, 0xAB, 0x07, 0x9D, 0x8B, 0xAB, 0x50],
[0x43, 0x88, 0xA1, 0xAB, 0xC9, 0xCC, 0xB4, 0x50],
[0x26, 0xB8, 0xBC, 0xE1, 0xB3, 0xBF, 0xB3, 0xC1, 0x50],
[0x1C, 0xA8, 0xC9, 0xC2, 0xD8, 0x2B, 0xB5, 0x50],
[0xB2, 0xB2, 0xC2, 0xD8, 0x2B, 0xB5, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xBD, 0x2A, 0xB2, 0xC2, 0xD8, 0x2B, 0xB5, 0x50],
[0x43, 0x81, 0xAB, 0x93, 0x80, 0xAC, 0x42, 0x50],
[0x41, 0xE3, 0x41, 0xE3, 0x83, 0x81, 0x13, 0x50],
[0x41, 0xE3, 0x41, 0xE3, 0xD8, 0x85, 0x19, 0xE3, 0x50],
[0x41, 0xE3, 0x41, 0xE3, 0x83, 0x81, 0x0F, 0xE3, 0x50],
[0xBC, 0xDE, 0x45, 0xC9, 0xCA, 0xC5, 0x3B, 0xD7, 0x50],
[0xBC, 0xDB, 0xB2, 0x99, 0x97, 0x50],
[0x34, 0xBB, 0xB8, 0xBB, 0xC9, 0x91, 0xA0, 0x50],
[0xC1, 0xBC, 0xB7, 0xC9, 0xC0, 0xCF, 0x50],
[0xCA, 0x26, 0xC8, 0xC9, 0xBA, 0xB3, 0xD7, 0x50],
[0x80, 0xAC, 0x42, 0x07, 0xA7, 0xE3, 0x13, 0x50],
[0xCC, 0xBC, 0x27, 0xC5, 0xB2, 0xC4, 0x50],
[0xB5, 0xDF, 0xB7, 0xC5, 0xCA, 0xDF, 0x44, 0x50],
[0xBE, 0xDE, 0xBE, 0xB2, 0xC9, 0x99, 0xD8, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xC4, 0x26, 0xDF, 0xC0, 0xB2, 0xBC, 0x50],
[0xB8, 0xDB, 0xB2, 0x99, 0x97, 0x50],
[0xC4, 0x26, 0xDF, 0xC0, 0xCF, 0xB4, 0x3A, 0x50],
[0xCD, 0x1A, 0xC9, 0xC7, 0xB9, 0x26, 0xD7, 0x50],
[0x33, 0xDE, 0xB7, 0x3C, 0xB8, 0xDB, 0x50],
[0xD3, 0xB3, 0x34, 0xB8, 0x19, 0xD8, 0x50],
[0xB5, 0xB3, 0x2C, 0xE0, 0xC9, 0xBC, 0xD9, 0xBC, 0x50],
[0xCC, 0xBC, 0x27, 0xC5, 0xC1, 0xB6, 0xD7, 0x50],
[0xB2, 0xC9, 0xC1, 0xC9, 0xB5, 0xCC, 0x30, 0x50],
[0x34, 0xB8, 0xC9, 0x86, 0x19, 0x50],
[0xC4, 0xB3, 0xC1, 0xE1, 0xB3, 0xB6, 0xBF, 0xB3, 0x50],
[0xD8, 0xE1, 0xB3, 0xC9, 0x86, 0x19, 0x50],
[0x27, 0xDE, 0xC9, 0xBA, 0xC5, 0x50],
[0xB1, 0xC5, 0xCE, 0xD8, 0xC9, 0x91, 0xA0, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xB5, 0xCF, 0xD3, 0xD8, 0xBA, 0x3A, 0xDE, 0x50],
[0x2D, 0xC2, 0xB3, 0xC9, 0x8F, 0x97, 0x50],
[0xCA, 0xDE, 0x29, 0xB7, 0xC9, 0xB3, 0x33, 0xDC, 0x50],
[0xCF, 0xD6, 0xB9, 0xC9, 0xB5, 0xCC, 0x30, 0x50],
[0xCC, 0xBC, 0x27, 0xC5, 0xD0, 0x2D, 0x50],
[0xCF, 0x26, 0xDF, 0xC0, 0x8C, 0x42, 0xE3, 0xAB, 0x50],
[0xBA, 0xB3, 0x29, 0xB7, 0x19, 0xD8, 0x50],
[0x40, 0xA9, 0xE3, 0xD8, 0x8C, 0x93, 0x50],
[0xB6, 0xC0, 0xB2, 0xB2, 0xBC, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0x46, 0xD6, 0x46, 0xD6, 0xCC, 0xB3, 0xBE, 0xDE, 0x50],
[0xCE, 0xC9, 0xB5, 0xC9, 0xC0, 0xC3, 0x26, 0xD0, 0x50],
[0xB5, 0xB2, 0xBC, 0xB2, 0x8B, 0xAC, 0x43, 0x50],
[0x80, 0xE3, 0x8C, 0x50],
[0xC5, 0x26, 0xC8, 0x27, 0x50],
[0xC6, 0x29, 0xB1, 0xBC, 0xC9, 0x99, 0x97, 0x50],
[0xBA, 0xB5, 0xD8, 0xC9, 0x86, 0x19, 0x50],
[0xB6, 0xBE, 0xB7, 0xC9, 0xB6, 0xB9, 0xD7, 0x50],
[0xB7, 0xC0, 0xC5, 0xB2, 0x09, 0x9E, 0x50],
[0xB5, 0xDF, 0xB7, 0xC5, 0xBC, 0xDE, 0x2C, 0xE1, 0x50],
[0xB5, 0xB3, 0x2C, 0xE0, 0xC9, 0x3D, 0xA6, 0x93, 0x50],
[0xB5, 0xCC, 0x30, 0x50],
[0xC9, 0xDB, 0xB2, 0xC9, 0xB5, 0xCC, 0x30, 0x50],
[0xFB, 0xB4, 0xDE, 0x30, 0xCF, 0x50],
[0xCF, 0xD3, 0xD8, 0xC9, 0xB2, 0xC4, 0x50],
[0xBC, 0x29, 0xB7, 0x30, 0xCF, 0x50],
[0xB5, 0xC1, 0xC2, 0xB7, 0xC9, 0xD0, 0x50],
[0xCC, 0xC4, 0xB2, 0x9C, 0x97, 0x50],
[0xB7, 0xB1, 0xB2, 0x30, 0xCF, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xD0, 0xB7, 0xD8, 0x30, 0xCF, 0x50],
[0xC5, 0x26, 0xB2, 0xBC, 0xC0, 0x50],
[0xCC, 0xB8, 0x3B, 0xB7, 0xB9, 0xDE, 0x50],
[0xB6, 0xDC, 0xD7, 0x2D, 0xC9, 0xB2, 0xBC, 0x50],
[0xC4, 0x26, 0xDF, 0xC0, 0x91, 0x98, 0x50],
[0xBC, 0xB1, 0xDC, 0xBE, 0x8F, 0x9D, 0x09, 0x50],
[0xC5, 0x26, 0xB2, 0x91, 0x8F, 0x50],
[0xCA, 0xCA, 0xC9, 0xB1, 0xB2, 0x50],
[0xB4, 0xDE, 0xCF, 0xB8, 0x50],
[0xBC, 0xD2, 0xDF, 0xC0, 0x91, 0x98, 0x50],
[0x8C, 0x88, 0x1C, 0xE3, 0x50],
[0xCF, 0xDF, 0xB6, 0xC5, 0xCE, 0xB3, 0xBE, 0xB7, 0x50],
[0xD0, 0xB4, 0xC5, 0xB2, 0x85, 0x3D, 0x50],
[0xBD, 0xD9, 0x34, 0xB2, 0x85, 0x9D, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xBA, 0xB5, 0xD8, 0xC9, 0x1A, 0x86, 0x95, 0x50],
[0xB2, 0xB6, 0x2D, 0xC1, 0xC9, 0x86, 0x19, 0x50],
[0xCE, 0xC9, 0xB5, 0xC9, 0x91, 0xA0, 0x50],
[0xF8, 0xCE, 0xDE, 0xC9, 0x91, 0x98, 0x50],
[0x2A, 0xBD, 0xDE, 0xB8, 0x27, 0x50],
[0xB7, 0xC9, 0xD0, 0x50],
[0xD8, 0xAB, 0x09, 0x50],
[0xA0, 0x8F, 0xA6, 0x89, 0xE3, 0x93, 0x50],
[0xB7, 0xDA, 0xB2, 0xC5, 0x8B, 0xAC, 0x43, 0x50],
[0xD0, 0x2D, 0xC9, 0x8B, 0xAC, 0x43, 0x50],
[0xC0, 0x3D, 0xC9, 0xBA, 0xBC, 0x50],
[0xBA, 0xB5, 0xD8, 0xC9, 0xC2, 0x3A, 0xBB, 0x50],
[0xB6, 0xD0, 0xC5, 0xD8, 0xC9, 0xC2, 0x3A, 0xBB, 0x50],
[0xCE, 0xC9, 0xB5, 0xC9, 0xC2, 0x3A, 0xBB, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xD8, 0xE1, 0xB3, 0xC9, 0x82, 0xA8, 0x89, 0x50],
[0xCA, 0xB6, 0xB2, 0xC9, 0xB2, 0x33, 0xDE, 0xBC, 0x50],
[0xBA, 0xBA, 0xDB, 0xC9, 0xB2, 0xBC, 0x50],
[0xCE, 0xC9, 0xB5, 0xC9, 0x8B, 0xAC, 0x43, 0x50],
[0xB6, 0xD0, 0xC5, 0xD8, 0xC9, 0x8B, 0xAC, 0x43, 0x50],
[0xBE, 0xB2, 0xC5, 0xD9, 0xCA, 0xB2, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0x9C, 0xA6, 0x0F, 0x50],
[0xA0, 0xE3, 0xA6, 0x50],
[0x1C, 0xE3, 0xA6, 0x9C, 0xA6, 0x0F, 0x50],
[0x34, 0xB3, 0x28, 0x50],
[0x30, 0xB2, 0x2C, 0xC5, 0x34, 0xB3, 0x28, 0x50],
[0x34, 0xB8, 0xC9, 0xB2, 0xBC, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xD0, 0xBC, 0xD6, 0xB3, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xF7, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xF8, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xF9, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xFA, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xFB, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xFC, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xFD, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xFE, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF6, 0xFF, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xF6, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xF7, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xF8, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xF9, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xFA, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xFB, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xFC, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xFD, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xFE, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF7, 0xFF, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xF6, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xF7, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xF8, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xF9, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xFA, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xFB, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xFC, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xFD, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xFE, 0x50],
[0xBC, 0xD6, 0xB3, 0xB7, 0xDE, 0xBC, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF8, 0xFF, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xF6, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xF7, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xF8, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xF9, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xFA, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xFB, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xFC, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xFD, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xFE, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xF9, 0xFF, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xF6, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xF7, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xF8, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xF9, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xFA, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xFB, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xFC, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xFD, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xFE, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFA, 0xFF, 0x50],
[0xDC, 0x2B, 0x9D, 0x8B, 0xAB, 0xFB, 0xF6, 0x50],
[0xCB, 0x33, 0xDE, 0x9D, 0x8B, 0xAB, 0xF6, 0xF7, 0x50],
[0xCB, 0x33, 0xDE, 0x9D, 0x8B, 0xAB, 0xF6, 0xF8, 0x50],
[0xCB, 0x33, 0xDE, 0x9D, 0x8B, 0xAB, 0xF6, 0xF9, 0x50],
[0xCB, 0x33, 0xDE, 0x9D, 0x8B, 0xAB, 0xF6, 0xFA, 0x50],
[0xCB, 0x33, 0xDE, 0x9D, 0x8B, 0xAB, 0xF6, 0xFB, 0x50],
[0xCB, 0x33, 0xDE, 0x9D, 0x8B, 0xAB, 0xF6, 0xFC, 0x50],
[0xCB, 0x33, 0xDE, 0x9D, 0x8B, 0xAB, 0xF6, 0xFD, 0x50],
[0xE3, 0xE3, 0xD4, 0xD2, 0xD9, 0xE3, 0xE3, 0x50]]

bags = ["ITEM", "ITEM", "0", "ITEM", "ITEM", "KEY_ITEM", "KEY_ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "KEY_ITEM", "KEY_ITEM", "KEY_ITEM", "KEY_ITEM", "KEY_ITEM", "KEY_ITEM", "0", "KEY_ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "KEY_ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "KEY_ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "0", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "ITEM", "KEY_ITEM", "ITEM", "ITEM", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "0", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "0", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "TM_HM", "ITEM"]

#jump_chars = [0xC2,0xC3,0xCA,0xD2,0xDA,0xE9] + [0xC4,0xD4,0xCC,0xCD,0xDC]
jump_chars = [0xC1, 0xD1, 0xE1, 0xF1]

a=[]
for i in range(255):
    if bags[i] == "ITEM":
        name = names[i] + [0x7F]
        prepend = []
        for j in range(len(name)):
            if 0x01 <= name[j] < 0x20:
                name[j] += 0x80
                prepend.append(0xE5) # push hl
                break
            if 0x20 <= name[j] < 0x40:
                name[j] += 0x90
                prepend.append(0xE5) # push hl
                break
            if 0x40 <= name[j] < 0x44:
                name[j] += 0x59
                prepend.append(0xE4) # invalid opcode
                break
            if 0x44 <= name[j] < 0x50:
                name[j] += 0x86
                prepend.append(0xE4) # invalid opcode
                break
        else:
            if 0xC9 not in name:
                a.append(("%02X:" % (i+1)) + ''.join([' %02X'%x for x in name]))
        name = prepend + name
        #for j in range(len(name)):
        #    if name[j] in jump_chars:
        #        a.append(("%02X:" % (i+1)) + ''.join([' %02X'%x for x in name]))
        #        #a.append("%02X%02X - %02X: %02X %02X %02X" % (name[j+2],name[j+1],i+1,name[j],name[j+1],name[j+2]))
a.sort()
for b in a:
    print(b)
