
data = [0x9E, 0xC2, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x8D, 0x2D, 0x2D, 0x2D, 0x00, 0x77, 0x77, 0x00, 0x01, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x19, 0x19, 0x19, 0x00, 0x46, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x1D, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x0D, 0xC2, 0x00, 0x18, 0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x1E, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x15, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x09, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x93, 0x8B, 0x50, 0x00, 0x00, 0x8A, 0x93, 0x8B, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xA6, 0x84, 0x07, 0x9D, 0x50, 0xC1, 0x9E, 0xE1, 0xE1, 0xE1, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

while len(data) < 391:
    data.append(0)

crash_items = [0x03,0x19,0x1E,0x23,0x2D,0x32,0x3C,0x4B,0x5A,0x64,0x78,0x87,0x96,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,0xC0,0xC1,0xC2,0xC3,0xC8,0xE1,0xFF]

highest_swap = 7
assert(7+0x30*highest_swap+0x30 <= len(data))
assert(0x127+6*highest_swap+6 <= len(data))
assert(7+0x30*highest_swap+0x30 <= len(data))
    
def printdata(data):
    for i in range(0x17):
        print(' '.join(['%02X'%x for x in data[i*0x10:i*0x10+0x10]]))

def swap(a,b,data):
    data = data[:]
    data[a],data[b] = data[b],data[a]
    data[7+0x30*a:7+0x30*a+0x30],data[7+0x30*b:7+0x30*b+0x30] = data[7+0x30*b:7+0x30*b+0x30],data[7+0x30*a:7+0x30*a+0x30]
    data[0x127+6*a:0x127+6*a+6],data[0x127+6*b:0x127+6*b+6] = data[0x127+6*b:0x127+6*b+6],data[0x127+6*a:0x127+6*a+6]
    data[0x14B+6*a:0x14B+6*a+6],data[0x14B+6*b:0x14B+6*b+6] = data[0x14B+6*b:0x14B+6*b+6],data[0x14B+6*a:0x14B+6*a+6]
    return data

normal_possible_moves =         ((0,1),(2,0),(2,1),(6,0),(6,1))
has_extra_item_possible_moves = ((0,1),(2,0),(2,1),(6,0),(6,1),(7,0),(7,1))

def find(data,depth,has_extra_item):
    if ((data[0x2B]+data[0x2C] == 0 and data[0x29]+data[0x2A] > 0 and data[0] != 0xFF) or
        (data[0x5B]+data[0x5C] == 0 and data[0x59]+data[0x5A] > 0 and data[0] != 0xFF and data[1] != 0xFF)):
        # divide by zero
        return False
    if ((data[1] == 0xC1 and data[2] == 0xFF and data[9]+data[0x39]!=0 and data[0] != 0) and
        (data[8] in crash_items or data[0x38] in crash_items)):
        #success
        print('%02X %02X %02X, %02X %02X %02X' % (data[0],data[8],data[9], data[1],data[0x38],data[0x39]))
        return True
    if depth > 8:
        # give up
        return False
    found = False
    has_extra_item = has_extra_item or data[8] == 0x9E or data[0x38] == 0x9E
    for a,b in has_extra_item_possible_moves if has_extra_item else normal_possible_moves:
        #if depth < 2:
        #    print(' '*depth+str(a+1),b+1)
        if (find(swap(a,b,data), depth+1, has_extra_item)):
            print((' / ' if has_extra_item else ' | ')*depth+str(a+1)+'+'+str(b+1))
            found = True
    return found

print(find(data,0,False))
